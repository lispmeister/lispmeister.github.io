<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: research | deeprecursion.com]]></title>
  <link href="http://deeprecursion.com/blog/categories/research/atom.xml" rel="self"/>
  <link href="http://deeprecursion.com/"/>
  <updated>2014-04-06T19:15:58+04:00</updated>
  <id>http://deeprecursion.com/</id>
  <author>
    <name><![CDATA[Markus Fix]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generation of MSC Diagrams form Network Traffic]]></title>
    <link href="http://deeprecursion.com/posts/2014/04/generation-of-msc-diagrams-form-network-traffic/"/>
    <updated>2014-04-06T17:14:00+04:00</updated>
    <id>http://deeprecursion.com/posts/2014/04/generation-of-msc-diagrams-form-network-traffic</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/2014/04/generation-of-MSC-diagrams-from-network-traffic.png" width="250" height="250" title="&lsquo;Generation of MSC Diagrams from Network Traffic&rsquo; &lsquo;Generation of MSC Diagrams from Network Traffic&rsquo;" ></p>

<p>I&rsquo;m trying to work out a way to auto-generate message flow diagrams
from method calls or traces in log files. Here I found a paper that
shows how to do that for TCP/IP network traffic logs.</p>

<p><blockquote><p>Message Sequence Chart (MSC) diagrams were designed for modeling of<br/>message-based communication between entities in the network. They are<br/>used primarily by developing of a new network protocol as a<br/>description of design requirements. However, MSC can be as well used<br/>for visualization of real traffic captured from a network. One of the<br/>applications aimed at work with MSC formalism is Sequence Chart Studio<br/>(SCStudio), which is being developed in research centre Institute for<br/>Theoretical Computer Science at FI MUNI.</p></p><p><p>The thesis is focused on the problem of generating Message Sequence<br/>Chart (MSC) diagrams from PCAP (packet capture) file format. This<br/>functionality was integrated into SCStu- dio as a new feature for<br/>importing PCAP files. This paper describes the developing process and<br/>behaviour of implemented functionality.</p><footer><strong>Viktor Borza | <a href="http://deeprecursion.com/files/2014/04/Generation-of-MSC-Diagrams-from-Network-Traffic.pdf">http://deeprecursion.com/files/2014/04/Generation-of-MSC-Diagrams-from-Network-Traffic.pdf</a> Generation of MSC Diagrams from Network Traffic</strong></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Computing on the Metal]]></title>
    <link href="http://deeprecursion.com/posts/2010/10/cloud-computing-on-the-metal/"/>
    <updated>2010-10-16T22:40:00+04:00</updated>
    <id>http://deeprecursion.com/posts/2010/10/cloud-computing-on-the-metal</id>
    <content type="html"><![CDATA[<p></p>


<div class="p_embed p_file_embed">
<a href="http://deeprecursion.com/file/2010/10/4152604-2010-hotcloud-lamp.pdf"><div class="p_icon"></div>
<div class="p_text">2010-hotcloud-lamp.pdf</div>
</a>
</div>




<p class="p1">Found an interesting paper about doing cloud computing without an OS in between the virtual machine and the app.</p>


<blockquote>The wide availability of cloud computing offers an unprecedented opportunity to rethink how we construct applications. The cloud is currently mostly used to package up existing software stacks and operating systems (e.g. LAMP) for scaling out websites. We instead view the cloud as a stable hardware platform, and present a programming framework which permits applications to be constructed to run directly on top of it without intervening software layers. Our prototype (dubbed Mirage) is unashamedly academic; it extends the Objective Caml language with storage extensions and a custom run-time to emit binaries that execute as a guest operating system under Xen. Mirage applications exhibit significant performance speedups for I/O and memory handling versus the same code running under Linux/Xen. Our results can be generalised to offer insight into improving more commonly used languages such as PHP, Python and Ruby, and we discuss lessons learnt and future directions.</blockquote>


<p>Portions of the code are <a href="https://github.com/avsm/mirage" title="mirage source">available</a> on github.</p>

]]></content>
  </entry>
  
</feed>
