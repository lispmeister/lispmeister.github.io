<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | deeprecursion.com]]></title>
  <link href="http://deeprecursion.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://deeprecursion.com/"/>
  <updated>2014-05-08T21:43:22+04:00</updated>
  <id>http://deeprecursion.com/</id>
  <author>
    <name><![CDATA[Markus Fix]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Distributed Tracing with Zipkin]]></title>
    <link href="http://deeprecursion.com/posts/2014/05/distributed-tracing-with-zipkin/"/>
    <updated>2014-05-08T18:35:00+04:00</updated>
    <id>http://deeprecursion.com/posts/2014/05/distributed-tracing-with-zipkin</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/2014/05/zipkin-docker-small.png" width="400" height="339" title="&lsquo;Distributed Tracing with Zipkin&rsquo; &lsquo;Distributed Tracing with Zipkin&rsquo;" ></p>

<p>Instead of parsing log file entries we now send tracing messages to a
Zipkin collector. To make initial development easier we containerized
a fully working Zipkin environment. All you need is <code>Virtualbox</code> and
<code>boot2docker</code> to boot Zipkin and run the demo Scala code.</p>

<p>All Docker images needed for Zipkin are registered as trusted builds
with the Docker.io index. To give it a spin you can just checkou the
Scala / Akka demo project and deploy the images. If you&rsquo;re curious the
Docker project shows how to setup and link containers.</p>

<p>Below you&rsquo;ll find instructions on how to test the Zipkin containers
with a Scala / Akka project running locally on your OSX host.</p>

<p>You first need to install VirtualBox.
<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p>

<p>Information on running Docker on OSX can be found here:
<a href="http://docs.docker.io/installation/mac/">http://docs.docker.io/installation/mac/</a></p>

<p>You need to have the Homebrew package manager installed:
<a href="http://brew.sh/">http://brew.sh/</a></p>

<p>You need to install <code>boot2docker</code>:</p>

<pre><code>brew update
brew install boot2docker
</code></pre>

<p>Once boot2docker is installed boot the VM for the first time:</p>

<pre><code>boot2docker start
</code></pre>

<p>When booting the images via boot2docker on OSX you will need to make
sure the guest VM ports are forwarded. Here&rsquo;s an example that forwards
the relevant ports for the Zipkin services:</p>

<pre><code># vm must be powered off 
boot2docker stop
# collector
VBoxManage modifyvm "boot2docker-vm" --natpf1 "tcp-port9410,tcp,127.0.0.1,9410,,9410"
VBoxManage modifyvm "boot2docker-vm" --natpf1 "udp-port9410,udp,127.0.0.1,9410,,9410"
VBoxManage modifyvm "boot2docker-vm" --natpf1 "tcp-port9900,tcp,127.0.0.1,9900,,9900"
# query
VBoxManage modifyvm "boot2docker-vm" --natpf1 "tcp-port9411,tcp,127.0.0.1,9411,,9411"
# web
VBoxManage modifyvm "boot2docker-vm" --natpf1 "tcp-port8080,tcp,127.0.0.1,8080,,8080"
# cassandra
VBoxManage modifyvm "boot2docker-vm" --natpf1 "tcp-port7000,tcp,127.0.0.1,7000,,7000"
VBoxManage modifyvm "boot2docker-vm" --natpf1 "tcp-port7001,tcp,127.0.0.1,7001,,7001"
VBoxManage modifyvm "boot2docker-vm" --natpf1 "tcp-port9042,tcp,127.0.0.1,9042,,9042"
VBoxManage modifyvm "boot2docker-vm" --natpf1 "tcp-port9160,tcp,127.0.0.1,9160,,9160"
# start VM
boot2docker start
</code></pre>

<h2>Install and Boot Zipkin</h2>

<p>Clone the demo project:</p>

<pre><code>git clone https://github.com/lispmeister/psychic-octo-bear.git zipkin-tracing-demo
cd zipkin-tracing-demo
</code></pre>

<p>Now you&rsquo;re ready to deploy the Docker images for Zipkin.
The images are all registered at
<a href="https://index.docker.io/u/lispmeister/">https://index.docker.io/u/lispmeister/</a>
and will be downloaded automatically.</p>

<pre><code>bin/deploy-zipkin.sh
</code></pre>

<p>This will fetch the Docker images from the Docker.io index and start
the containers. Downloading the Docker images will take a while. Be
patient. Once the images are downloaded the deploy script will start
the containers. Wait until the CPU load is below 40% again. Booting
Cassandra in the container can take quite a while.</p>

<p>If you want to trace code that runs on the host you will need to
expose and forward the collector port as shown in deploy.sh.</p>

<p>Once the containers are running you can connect to the collector on
port 9410 via akka-tracing or other libraries that support Zipkin tracing.
<a href="https://github.com/levkhomich/akka-tracing">https://github.com/levkhomich/akka-tracing</a></p>

<h2>Install SBT</h2>

<p>You need to have <code>sbt</code> installed.</p>

<pre><code>brew install sbt
</code></pre>

<h2>Run the demo</h2>

<p>The demo creates ten Put requests that flow through the Web,
Service, S3 actors. The flows into and out of the actors are traced
using the Akka Tracing library which implements a Scala interface for
the Twitter Zipkin distributed tracing tool.</p>

<pre><code>sbt run
</code></pre>

<h2>Inspect the Trace</h2>

<p>Open a browser to the local Zipkin web instance at this address:</p>

<p><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a></p>

<h2>Links:</h2>

<ul>
<li><a href="https://github.com/lispmeister/psychic-octo-bear">Scala / Akka Demo Project</a></li>
<li><a href="https://github.com/lispmeister/docker-zipkin">Docker container with Zipkin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generation of MSC Diagrams from Network Traffic]]></title>
    <link href="http://deeprecursion.com/posts/2014/04/generation-of-msc-diagrams-from-network-traffic/"/>
    <updated>2014-04-06T17:14:00+04:00</updated>
    <id>http://deeprecursion.com/posts/2014/04/generation-of-msc-diagrams-from-network-traffic</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/2014/04/generation-of-MSC-diagrams-from-network-traffic.png" width="250" height="250" title="&lsquo;Generation of MSC Diagrams from Network Traffic&rsquo; &lsquo;Generation of MSC Diagrams from Network Traffic&rsquo;" ></p>

<p>I&rsquo;m trying to work out a way to auto-generate message flow diagrams
from method calls or traces in log files. Here I found a paper that
shows how to do that for TCP/IP network traffic logs.</p>

<p><blockquote><p>Message Sequence Chart (MSC) diagrams were designed for modeling of<br/>message-based communication between entities in the network. They are<br/>used primarily by developing of a new network protocol as a<br/>description of design requirements. However, MSC can be as well used<br/>for visualization of real traffic captured from a network. One of the<br/>applications aimed at work with MSC formalism is Sequence Chart Studio<br/>(SCStudio), which is being developed in research centre Institute for<br/>Theoretical Computer Science at FI MUNI.</p></p><p><p>The thesis is focused on the problem of generating Message Sequence<br/>Chart (MSC) diagrams from PCAP (packet capture) file format. This<br/>functionality was integrated into SCStu- dio as a new feature for<br/>importing PCAP files. This paper describes the developing process and<br/>behaviour of implemented functionality.</p><footer><strong>Viktor Borza | <a href="http://deeprecursion.com/file/2014/04/Generation-of-MSC-Diagrams-from-Network-Traffic.pdf">http://deeprecursion.com/file/2014/04/Generation-of-MSC-Diagrams-from-Network-Traffic.pdf</a> Generation of MSC Diagrams from Network Traffic</strong></footer></blockquote></p>

<p>Other sequence diagram generators:</p>

<ul>
<li><a href="http://trace2uml.tigris.org/">TraceUML</a> to generate sequence diagrams from log statements.</li>
<li><a href="http://blockdiag.com/en/seqdiag/">seqdiag</a> is a Python tool.</li>
<li><a href="http://satoss.uni.lu/software/mscpackage/">mscpackage</a> is a LaTeX package for drawing message sequence
diagrams that supports the full MSC2000 language.</li>
<li><a href="http://sdedit.sourceforge.net/">Quick Sequence Diagram Editor</a> is a
tool for creating UML sequence diagrams from textual descriptions of
objects and messages.</li>
<li><a href="http://bramp.github.io/js-sequence-diagrams/">JS Sequence Diagrams</a>
is a simple javascript library to turn text into vector UML sequence diagrams.</li>
<li><a href="http://jumly.tmtk.net/">Jumly</a> is a JavaScript library for UML
diagram rendering engine. It works completely on client side.</li>
</ul>


<p>I&rsquo;m currently using <a href="http://www.mcternan.me.uk/mscgen/">Mscgen</a>
because I can edit and render diagram source in Emacs with org-mode.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking Forth - A Language and Philosophy for Solving Problems]]></title>
    <link href="http://deeprecursion.com/posts/2011/06/thinking-forth-a-language-and-philosophy-for/"/>
    <updated>2011-06-23T16:54:24+04:00</updated>
    <id>http://deeprecursion.com/posts/2011/06/thinking-forth-a-language-and-philosophy-for</id>
    <content type="html"><![CDATA[<div class="p_embed p_file_embed">
<a href="http://deeprecursion.com/file/2011/06/6529208-thinking-forth-color.pdf"><div class="p_icon"></div>
<div class="p_text">thinking-forth-color.pdf</div>
</a>
</div>


<p>I recently rediscovered Leo Brodie's book "Thinking Forth - A Language <br>and Philosophy of Solving Problems". It has been reissued under a <br>creative commons license. It's still a joy to read and I highly <br>recommend it.</p>

]]></content>
  </entry>
  
</feed>
